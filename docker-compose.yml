services:
  # Kafka Broker (KRaft mode, no ZooKeeper)
  kafka:
    image: bitnami/kafka:4.0
    container_name: kafkadog-kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_CONTROLLER_LISTENER_NAME=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_DELETE_TOPIC_ENABLE=true
      - KAFKA_CFG_LOG_RETENTION_HOURS=168
      - KAFKA_CFG_LOG_SEGMENT_BYTES=1073741824
      - KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS=300000
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server localhost:9092 --list",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Kafka UI for observability
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafkadog-kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=localhost:2181
      - KAFKA_CLUSTERS_0_READONLY=false
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/actuator/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: backend/apps/api-gateway/Dockerfile
    container_name: kafkadog-api-gateway
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=api-gateway
      - ORDER_SAGA_URL=http://order-saga:3007
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3001/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Saga Service
  order-saga:
    build:
      context: .
      dockerfile: backend/apps/order-saga/Dockerfile
    container_name: kafkadog-order-saga
    environment:
      - NODE_ENV=development
      - PORT=3002
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=order-saga
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3002/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: backend/apps/payment-service/Dockerfile
    container_name: kafkadog-payment-service
    environment:
      - NODE_ENV=development
      - PORT=3003
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=payment-service
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3003/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Inventory Service
  inventory-service:
    build:
      context: .
      dockerfile: backend/apps/inventory-service/Dockerfile
    container_name: kafkadog-inventory-service
    environment:
      - NODE_ENV=development
      - PORT=3004
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=inventory-service
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3004/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: backend/apps/notification-service/Dockerfile
    container_name: kafkadog-notification-service
    environment:
      - NODE_ENV=development
      - PORT=3005
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=notification-service
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3005/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics Service
  analytics-service:
    build:
      context: .
      dockerfile: backend/apps/analytics-service/Dockerfile
    container_name: kafkadog-analytics-service
    environment:
      - NODE_ENV=development
      - PORT=3006
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_CLIENT_ID=analytics-service
    depends_on:
      kafka:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3006/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: kafkadog-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  kafka_data:
    driver: local

networks:
  default:
    name: kafkadog-network
